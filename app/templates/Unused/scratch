from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import LoginManager, login_user, logout_user, login_required, current_user

login_manager = LoginManager()

db = SQLAlchemy()


class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)


@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        # Create a new user based on the form data
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        user = User(username=username, email=email)
        user.set_password(password)
        db.session.add(user)
        db.session.commit()
        flash('You have successfully registered!', 'success')
        return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        # Validate the login credentials
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()
        if user is not None and user.check_password(password):
            login_user(user)
            flash('You have successfully logged in!', 'success')
            return redirect(url_for('index'))
        else:
            flash('Invalid username or password. Please try again.', 'danger')
    return render_template('login.html')

@login_manager.user_loader
def load_user(user_id):
    # Return the User object for the given user_id
    return User.query.get(int(user_id))

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('You have been logged out.', 'success')
    return redirect(url_for('index'))

from flask import Flask, render_template, request, redirect, url_for
import random
import os

app = Flask(__name__)

# File paths
word_pairs_file = "word_pairs.txt"
used_word_pairs_file = "used_word_pairs.txt"
synonyms_file = "synonyms.txt"
used_synonyms_file = "used_synonyms.txt"


def load_word_pair():
    try:
        with open(word_pairs_file, "r") as file:
            line = file.readline()
            word_pair = tuple(line.strip().split(","))

            # Check if the word pair is already in used_word_pairs.txt
            if word_pair_in_used(word_pair):
                print("You have already guessed today's word pair. Check back again tomorrow for a new word pair!")
                #return load_word_pair()
            else:
                return word_pair
    except FileNotFoundError:
        print(f"Error: File {word_pairs_file} not found.")
        return None
    except Exception as e:
        print(f"Error: {e}")
        return None


def word_pair_in_used(word_pair):
    try:
        with open(used_word_pairs_file, "r") as file:
            return ",".join(word_pair) in file.read()
    except FileNotFoundError:
        return False
    except Exception as e:
        print(f"Error: {e}")
        return False


def load_synonyms():
    synonyms_dict = {}
    try:
        with open(synonyms_file, "r") as file:
            for line in file:
                parts = line.strip().split(":")
                if len(parts) == 2:
                    word, synonyms = parts[0], parts[1].split(",")
                    synonyms_dict[word] = synonyms
    except FileNotFoundError:
        print(f"Error: File {synonyms_file} not found.")
    except Exception as e:
        print(f"Error: {e}")
    return synonyms_dict


def get_synonyms(word, synonyms_dict):
    return synonyms_dict.get(word, [])


def move_word_pair_to_used(word_pair):
    with open(used_word_pairs_file, "a") as file:
        file.write(",".join(word_pair) + "\n")


def move_synonyms_to_used(word_pair, synonyms_dict):
    with open(used_synonyms_file, "a") as file:
        for word in word_pair:
            if word in synonyms_dict:
                file.write(f"{word}:{','.join(synonyms_dict[word])}\n")
                del synonyms_dict[word]


def remove_word_pair_from_file(word_pair):
    try:
        with open(word_pairs_file, "r") as file:
            lines = file.readlines()
        with open(word_pairs_file, "w") as file:
            for line in lines:
                if line.strip() != ",".join(word_pair):
                    file.write(line)
    except FileNotFoundError:
        print(f"Error: File {word_pairs_file} not found.")
    except Exception as e:
        print(f"Error: {e}")


def remove_synonyms_from_file(word_pair):
    try:
        with open(synonyms_file, "r") as file:
            lines = file.readlines()
        with open(synonyms_file, "w") as file:
            for line in lines:
                parts = line.strip().split(":")
                if len(parts) == 2 and parts[0] not in word_pair:
                    file.write(line)
    except FileNotFoundError:
        print(f"Error: File {synonyms_file} not found.")
    except Exception as e:
        print(f"Error: {e}")


def rhyming_game():
    word_pair = load_word_pair()

    if not word_pair:
        return

    word1, word2 = word_pair
    synonyms_dict = load_synonyms()
    used_word_pair = False
    score = 0

    while not used_word_pair:
        initial_synonyms_word1 = get_synonyms(word1, synonyms_dict).copy()
        initial_synonyms_word2 = get_synonyms(word2, synonyms_dict).copy()

        if not initial_synonyms_word1 or not initial_synonyms_word2:
            print("Error: No synonyms found for one or both words.")
            break

        synonym1 = initial_synonyms_word1.pop(0)
        synonym2 = initial_synonyms_word2.pop(0)

        print(f"Synonym of word 1: {synonym1}")
        print(f"Synonym of word 2: {synonym2}")

        user_input1 = input("Enter the original word for the first synonym (or type 'quit' to exit): ").strip().lower()
        if user_input1 == 'quit':
            print(f"Thanks for playing! Your final score is: {score}. Goodbye.")
            break

        user_input2 = input("Enter the original word for the second synonym (or type 'quit' to exit): ").strip().lower()
        if user_input2 == 'quit':
            print(f"Thanks for playing! Your final score is: {score}. Goodbye.")
            break

        if user_input1 == word1 and user_input2 == word2:
            score += 1
            print(f"Correct! You get a point. Your current score is: {score}. ")
            used_word_pair = True
            move_word_pair_to_used(word_pair)
            move_synonyms_to_used(word_pair, synonyms_dict)
            remove_word_pair_from_file(word_pair)
            remove_synonyms_from_file(word_pair)
        else:
            print("One or both of your guesses are incorrect!")

            retry_hint = input(
                "Do you want to (1) retry with the same words or (2) ask for a hint? Enter 1 or 2: ").strip()
            if retry_hint == '1':
                print(f"Retrying with the same words:")
            elif retry_hint == '2':
                # Give the next synonym in the list if available
                synonym1_new = initial_synonyms_word1[0] if initial_synonyms_word1 else get_synonyms(word1)[1] if len(
                    get_synonyms(word1)) > 1 else synonym1
                synonym2_new = initial_synonyms_word2[0] if initial_synonyms_word2 else get_synonyms(word2)[1] if len(
                    get_synonyms(word2)) > 1 else synonym2
                print(f"Here are two new synonyms as hints:")
                print(f"New synonym of word 1: {synonym1_new}")
                print(f"New synonym of word 2: {synonym2_new}")
            else:
                print("Invalid choice. Please enter 1 or 2.")

@app.route('/get_hint')
def get_hint():
    word_pair = load_word_pair()

    if not word_pair:
        return render_template('game_over.html')

    word1, word2 = word_pair
    synonyms_dict = load_synonyms()

    # Get both synonyms for the chosen words
    synonyms_word1 = synonyms_dict.get(word1, ["No synonyms found"])
    synonyms_word2 = synonyms_dict.get(word2, ["No synonyms found"])

    return render_template('second_play.html', word1=word1, word2=word2, synonyms_word1=synonyms_word1, synonyms_word2=synonyms_word2)


def load_word_pair_from_synonyms():
    try:
        with open("synonyms.txt", "r") as file:
            lines = file.readlines()
            if lines:
                # Choose a random line (word pair) from the file
                line = random.choice(lines)
                # Split the line into words
                words = line.strip().split(":")[0].split(",")
                # Ensure that there are at least two words
                if len(words) >= 2:
                    return tuple(words[:2])  # Return the first two words as a tuple
    except FileNotFoundError:
        print("Error: File synonyms.txt not found.")
    except Exception as e:
        print(f"Error: {e}")

    # Return None if there was an error or not enough words
    return None


@app.route('/')
def index():
    return render_template('index.html')

@app.route('/play', methods=['POST', 'GET'])
def play():
    word_pair = load_word_pair()

    if not word_pair:
        return render_template('game_over.html')

    word1, word2 = word_pair
    synonyms_dict = load_synonyms()

    # Get the first synonym of each word
    synonym_word1 = synonyms_dict.get(word1, ["No synonyms found"])[0]
    synonym_word2 = synonyms_dict.get(word2, ["No synonyms found"])[0]

    return render_template('play.html', word1=word1, word2=word2, synonym_word1=synonym_word1, synonym_word2=synonym_word2)

@app.route('/check_guess', methods=['POST'])
def check_guess():
    user_input1 = request.form.get('user_input1', '').strip().lower()
    user_input2 = request.form.get('user_input2', '').strip().lower()
    word1 = request.form.get('word1', '')
    word2 = request.form.get('word2', '')

    word_pair = (word1, word2)  # Define word_pair here

    if user_input1 == word1 and user_input2 == word2:
        move_word_pair_to_used((word1, word2))
        move_synonyms_to_used(word_pair, load_synonyms())  # Move synonyms to used_synonyms.txt
        remove_synonyms_from_file(word_pair)
        remove_word_pair_from_file((word1, word2))
        return render_template('correct_guess.html')
    else:
        return render_template('incorrect_guess.html')


if __name__ == "__main__":
    app.run(debug=True)

#add instructions?


@bp.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_password(token):
    email = User.verify_reset_token(token)
    if not email:
        flash('The reset link is invalid or has expired.')
        return redirect(url_for('reset_password_request'))

    form = ResetPasswordForm()

    if form.validate_on_submit():
        logging.debug("Form is validated and submitted")
        new_password = form.password.data
        logging.debug(f"New password to set: {new_password}")
        user = User.query.filter_by(email=email).first()
        if user:
            user.set_password(new_password)
            try:
                db.session.commit()
                logging.debug("Password successfully committed to the database.")
                flash('Your password has been updated.')
            except Exception as e:
                db.session.rollback()
                logging.debug(f"Error during commit: {e}")
                flash('An error occurred while updating the password.')
            return redirect(url_for('auth.login'))

    return render_template('reset_password.html', form=form)


HERE!!!!!!!!!!!!!
def load_synonyms():
    synonyms_dict = {}
    try:
        synonyms = Synonym.query.all()
        for synonym in synonyms:
            synonyms_dict[synonym.word] = synonym.synonyms.split(",")
    except Exception as e:
        print(f"Error loading synonyms from database: {e}")
    return synonyms_dict

def get_synonyms(word, synonyms_dict):
    return synonyms_dict.get(word, [])

def move_word_pair_to_used(word_pair, user_id):
    try:
        pair = WordPair.query.filter_by(word1=word_pair[0], word2=word_pair[1], user_id=user_id).first()
        if pair:
            pair.used = True
            db.session.commit()
    except Exception as e:
        print(f"Error moving word pair to used: {e}")

def move_synonyms_to_used(word_pair, user_id):
    try:
        # Find and mark the synonyms associated with the word pair as used
        for word in word_pair:
            synonym_entry = Synonym.query.filter_by(word=word).first()
            if synonym_entry:
                synonym_entry.used = True
                db.session.commit()
    except Exception as e:
        print(f"Error moving synonyms to used: {e}")

def remove_word_pair_from_file(word_pair):
    try:
        with open(word_pairs_file, "r") as file:
            lines = file.readlines()
        with open(word_pairs_file, "w") as file:
            for line in lines:
                if line.strip() != ",".join(word_pair):
                    file.write(line)
    except FileNotFoundError:
        print(f"Error: File {word_pairs_file} not found.")
    except Exception as e:
        print(f"Error: {e}")

def remove_synonyms_from_file(word_pair):
    try:
        with open(synonyms_file, "r") as file:
            lines = file.readlines()
        with open(synonyms_file, "w") as file:
            for line in lines:
                parts = line.strip().split(":")
                if len(parts) == 2 and parts[0] not in word_pair:
                    file.write(line)
    except FileNotFoundError:
        print(f"Error: File {synonyms_file} not found.")
    except Exception as e:
        print(f"Error: {e}")

def rhyming_game():
    word_pair = load_word_pair()

    if not word_pair:
        return

    word1, word2 = word_pair
    synonyms_dict = load_synonyms()
    used_word_pair = False
    score = 0

    while not used_word_pair:
        initial_synonyms_word1 = get_synonyms(word1, synonyms_dict).copy()
        initial_synonyms_word2 = get_synonyms(word2, synonyms_dict).copy()

        if not initial_synonyms_word1 or not initial_synonyms_word2:
            print("Error: No synonyms found for one or both words.")
            break

        synonym1 = initial_synonyms_word1.pop(0)
        synonym2 = initial_synonyms_word2.pop(0)

        print(f"Synonym of word 1: {synonym1}")
        print(f"Synonym of word 2: {synonym2}")

        user_input1 = input("Enter the original word for the first synonym (or type 'quit' to exit): ").strip().lower()
        if user_input1 == 'quit':
            print(f"Thanks for playing! Your final score is: {score}. Goodbye.")
            break

        user_input2 = input("Enter the original word for the second synonym (or type 'quit' to exit): ").strip().lower()
        if user_input2 == 'quit':
            print(f"Thanks for playing! Your final score is: {score}. Goodbye.")
            break

        if user_input1 == word1 and user_input2 == word2:
            score += 1
            print(f"Correct! You get a point. Your current score is: {score}. ")
            used_word_pair = True
            move_word_pair_to_used(word_pair)
            move_synonyms_to_used(word_pair, synonyms_dict)
            remove_word_pair_from_file(word_pair)
            remove_synonyms_from_file(word_pair)
        else:
            print("One or both of your guesses are incorrect!")

            retry_hint = input(
                "Do you want to (1) retry with the same words or (2) ask for a hint? Enter 1 or 2: ").strip()
            if retry_hint == '1':
                print(f"Retrying with the same words:")
            elif retry_hint == '2':
                # Give the next synonym in the list if available
                synonym1_new = initial_synonyms_word1[0] if initial_synonyms_word1 else get_synonyms(word1)[1] if len(
                    get_synonyms(word1)) > 1 else synonym1
                synonym2_new = initial_synonyms_word2[0] if initial_synonyms_word2 else get_synonyms(word2)[1] if len(
                    get_synonyms(word2)) > 1 else synonym2
                print(f"Here are two new synonyms as hints:")
                print(f"New synonym of word 1: {synonym1_new}")
                print(f"New synonym of word 2: {synonym2_new}")
            else:
                print("Invalid choice. Please enter 1 or 2.")

def load_word_pair_from_synonyms():
    try:
        with open(os.path.join(txt_folder, "synonyms.txt"), "r") as file:
            lines = file.readlines()
            if lines:
                # Choose a random line (word pair) from the file
                line = random.choice(lines)
                # Split the line into words
                words = line.strip().split(":")[0].split(",")
                # Ensure that there are at least two words
                if len(words) >= 2:
                    return tuple(words[:2])  # Return the first two words as a tuple
    except FileNotFoundError:
        print("Error: File synonyms.txt not found.")
    except Exception as e:
        print(f"Error: {e}")

    # Return None if there was an error or not enough words
    return None

def import_synonyms(file_path):
    """Import synonyms from a CSV file into the database."""
    with app.app_context():
        with open(file_path, mode='r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                word = row['word']
                synonym = row['synonym']

                # Fetch or create the synonym entry
                synonym_entry = Synonym.query.filter_by(word=word).first()
                if not synonym_entry:
                    synonym_entry = Synonym(word=word, synonyms='')
                    db.session.add(synonym_entry)

                # Add the new synonym to the existing synonyms
                if synonym_entry.synonyms:
                    synonym_entry.synonyms += ',' + synonym
                else:
                    synonym_entry.synonyms = synonym

            db.session.commit()

#def insert_data():
#    """Insert example data into the database."""
#    with app.app_context():
#        users = User.query.all()
#        word_pairs = [
#            {'word1': 'happy', 'word1_synonym1': 'joyful', 'word1_synonym2': 'content', 'word2': 'sad',
#             'word2_synonym1': 'unhappy', 'word2_synonym2': 'down'},
#            {'word1': 'big', 'word1_synonym1': 'large', 'word1_synonym2': 'huge', 'word2': 'small',
#             'word2_synonym1': 'tiny', 'word2_synonym2': 'little'}
#        ]

#        for user in users:
#            for pair in word_pairs:
#                word_pair = WordPair(
#                    word1=pair['word1'],
#                    word1_synonym1=pair['word1_synonym1'],
#                    word1_synonym2=pair['word1_synonym2'],
#                    word2=pair['word2'],
#                    word2_synonym1=pair['word2_synonym1'],
#                    word2_synonym2=pair['word2_synonym2']
#                )
#                db.session.add(word_pair)
#                db.session.commit()
#                add_user_word_pairs(word_pair.id)
#
#        print("Data inserted successfully.")

    # Uncomment the line below to import synonyms if needed
    #import_synonyms('path/to/synonyms.csv')
    # Uncomment the line below to insert example data if needed
    # insert_data()

class Synonym(db.Model):
    __tablename__ = 'synonym'
    id = db.Column(db.Integer, primary_key=True)
    word = db.Column(db.String(100), unique=True, nullable=False)
    synonyms = db.Column(db.String, default='')  # Storing synonyms as a comma-separated string

    def __repr__(self):
        return f'<Synonym {self.word}>'