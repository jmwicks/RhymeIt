"""Fix foreign key in Attempt model

Revision ID: 97796fda6da7
Revises: db815611d5a6
Create Date: 2024-10-07 16:03:37.219899

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '97796fda6da7'
down_revision = 'db815611d5a6'
branch_labels = None
depends_on = None


def upgrade():
    # Step 1: Ensure unique constraint on the composite key of user_word_pair
    with op.batch_alter_table('user_word_pair', schema=None) as batch_op:
        batch_op.create_unique_constraint('uq_user_word_pair', ['user_id', 'word_pair_id'])

    # Step 2: Drop existing foreign key constraints in the attempt table if they exist
    with op.batch_alter_table('attempt', schema=None) as batch_op:
        batch_op.drop_constraint('fk_attempt_user_word_pair', type_='foreignkey', if_exists=True)

    # Step 3: Create composite foreign key constraint
    with op.batch_alter_table('attempt', schema=None) as batch_op:
        batch_op.create_foreign_key(
            'fk_attempt_user_word_pair',  # New constraint name
            'user_word_pair',              # Referenced table
            ['user_id', 'word_pair_id'],   # Local columns in 'attempt'
            ['user_id', 'word_pair_id']     # Referenced columns in 'user_word_pair'
        )

    # Step 4: Add the new 'id' column to user_word_pair allowing nulls temporarily
    with op.batch_alter_table('user_word_pair', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.Integer(), nullable=True))

    # Step 5: Populate the new 'id' column for existing records
    op.execute('''
        WITH updated AS (
            SELECT ctid, row_number() OVER () AS new_id
            FROM user_word_pair
        )
        UPDATE user_word_pair
        SET id = updated.new_id
        FROM updated
        WHERE user_word_pair.ctid = updated.ctid;
    ''')

    # Step 6: Alter the column to make it NOT NULL
    with op.batch_alter_table('user_word_pair', schema=None) as batch_op:
        batch_op.alter_column('id', nullable=False)

    # Step 7: Drop the 'attempts' column if needed
    with op.batch_alter_table('user_word_pair', schema=None) as batch_op:
        batch_op.drop_column('attempts')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_word_pair', schema=None) as batch_op:
        batch_op.add_column(sa.Column('attempts', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_column('id')

    # ### end Alembic commands ###
